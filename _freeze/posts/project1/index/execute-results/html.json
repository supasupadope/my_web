{
  "hash": "95af28c6fcf277cf07a577e9b9a7717e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"최저 임금 데이터 분석\"\nauthor: \"정한렬\"\ndate: \"2024-12-26\"\ncategories: [bigdata]\njupyter: python3\npdf-engine: xelatex\nheader-includes:\n  - \\usepackage{kotex}\n  - \\usepackage{fontspec}\n  - \\setmainfont{Malgun Gothic}  # 맑은 고딕 폰트 설정\n---\n\n\n\n\n### 소비자 동향 조사\n\n::: {#0369d287 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt    \nimport seaborn as sns\n\nplt.rcParams.update({\"figure.dpi\": 150,\n                     \"figure.figsize\": [8, 6],\n                     \"font.size\": 11,\n                     \"font.family\": \"Malgun Gothic\"})\n\nintro = pd.read_excel(\"data/소비자동향조사.xlsx\")\nplt.figure(figsize = [5.5,4])\nintro[\"year\"]\nsns.lineplot(data=intro, x='year', y='임금수준전망', color='dodgerblue', label='임금수준전망', marker='o')\nsns.lineplot(data=intro, x='year', y='향후경기전망', color='salmon', label='향후경기전망', marker='o')\nsns.lineplot(data=intro, x='year', y='현재경기판단', color='red', label='현재경기판단', marker='o')\nplt.xlabel('Year',fontsize=14)\nplt.ylabel('Percentage(%)',fontsize=14)\nplt.title(\"소비자동향조사\")\nplt.legend(loc = \"lower right\")\nplt.grid()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=759 height=600}\n:::\n:::\n\n\n**소비자동향조사에 따르면, 소비자들은 경기를 부정적으로 판단하고 있는데, 그에 반해 임금 수준은 상승할 것이라고 예상한다. 그렇다면 임금은 정말 지속적으로 상승했는지, 소비자들이 임금 상승의 수혜를 제대로 받고 있는지 알아보기 위해 임금 데이터를 바탕으로 분석을 진행하고자 하였다. **\n\n### 우리가 사용한 데이터와 수치들\n<img src=\"data/4.PNG\" alt=\"Description\" width=\"500\" height=\"500\">\n![](data/1.PNG)\n![](data/2.PNG)\n![](data/3.PNG)\n\n\n\n\n* **CPI: 소비자물가지수란?**\n\n***\n![](data/CPI.PNG)\n\n**CPI(소비자 물가 지수) :**\n소비자들이 일상 생활에서 구매하는 상품과 서비스의 가격 변동을 측정하는 지표이다. 그 측정을 위해 다양한 소비자 Basket을 사용하며, 일반적인 CPI의 Basket엔 식품, 주택, 의류, 교통, 교육, 의료 등 모든 상품과 서비스가 포함된다.\n\n**Food_CPI(식품 물가 지수) :**\n식품의 가격 변동을 측정하는 지표로, 필수재인 식품의 가격 변동을 반영한다. 식품은 가격 변동이 크기 때문에 소비자에게 체감되는 영향이 크다.\n\n## CPI(소비자 물가 지수) \n\n* 데이터 파일 읽어오기\n\n::: {#144284a1 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.read_excel(\"data/cpi_2011to2023.xlsx\")\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>시점</th>\n      <th>전국</th>\n      <th>전국.1</th>\n      <th>전국.2</th>\n      <th>전국.3</th>\n      <th>전국.4</th>\n      <th>전국.5</th>\n      <th>전국.6</th>\n      <th>전국.7</th>\n      <th>전국.8</th>\n      <th>...</th>\n      <th>전국.141</th>\n      <th>전국.142</th>\n      <th>전국.143</th>\n      <th>전국.144</th>\n      <th>전국.145</th>\n      <th>전국.146</th>\n      <th>전국.147</th>\n      <th>전국.148</th>\n      <th>전국.149</th>\n      <th>전국.150</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>시점</td>\n      <td>총지수</td>\n      <td>생활물가지수</td>\n      <td>식품</td>\n      <td>쌀</td>\n      <td>국수</td>\n      <td>라면</td>\n      <td>두부</td>\n      <td>빵</td>\n      <td>떡</td>\n      <td>...</td>\n      <td>미용료</td>\n      <td>치약</td>\n      <td>샴푸</td>\n      <td>화장지</td>\n      <td>기초화장품</td>\n      <td>보험서비스료</td>\n      <td>자동차보험료</td>\n      <td>전월세</td>\n      <td>생활물가 이외</td>\n      <td>전·월세포함 생활물가지수</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2011</td>\n      <td>89.85</td>\n      <td>91.997</td>\n      <td>83.653</td>\n      <td>76.467</td>\n      <td>-</td>\n      <td>88.315</td>\n      <td>89.406</td>\n      <td>69.442</td>\n      <td>81.75</td>\n      <td>...</td>\n      <td>78.205</td>\n      <td>86.66</td>\n      <td>129.914</td>\n      <td>102.494</td>\n      <td>90.913</td>\n      <td>-</td>\n      <td>92.538</td>\n      <td>85.412</td>\n      <td>87.841</td>\n      <td>90.988</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2012</td>\n      <td>91.815</td>\n      <td>93.562</td>\n      <td>85.614</td>\n      <td>83.846</td>\n      <td>-</td>\n      <td>94.881</td>\n      <td>90.768</td>\n      <td>72.246</td>\n      <td>83.81</td>\n      <td>...</td>\n      <td>81.967</td>\n      <td>85.68</td>\n      <td>132.54</td>\n      <td>105.674</td>\n      <td>93.035</td>\n      <td>-</td>\n      <td>90.755</td>\n      <td>89.014</td>\n      <td>89.972</td>\n      <td>92.886</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2013</td>\n      <td>93.01</td>\n      <td>94.238</td>\n      <td>86.326</td>\n      <td>88.444</td>\n      <td>-</td>\n      <td>95.367</td>\n      <td>96.588</td>\n      <td>77.474</td>\n      <td>85.572</td>\n      <td>...</td>\n      <td>85.2</td>\n      <td>81.732</td>\n      <td>124.058</td>\n      <td>105.83</td>\n      <td>94.115</td>\n      <td>-</td>\n      <td>90.137</td>\n      <td>91.383</td>\n      <td>91.64</td>\n      <td>93.815</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2014</td>\n      <td>94.196</td>\n      <td>95.031</td>\n      <td>86.776</td>\n      <td>86.885</td>\n      <td>-</td>\n      <td>95.444</td>\n      <td>97.112</td>\n      <td>82.16</td>\n      <td>86.886</td>\n      <td>...</td>\n      <td>89.075</td>\n      <td>91.295</td>\n      <td>124.032</td>\n      <td>103.967</td>\n      <td>97.776</td>\n      <td>-</td>\n      <td>90.137</td>\n      <td>93.527</td>\n      <td>93.167</td>\n      <td>94.807</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 152 columns</p>\n</div>\n```\n:::\n:::\n\n\n* 컬럼명 변경, 행 제거, 특정 컬럼 추출\n\n::: {#cf3d92ff .cell execution_count=3}\n``` {.python .cell-code}\ndf.rename(columns = {'시점':\"year\",\"전국\" : \"cpi\",\"전국.2\":\"food_cpi\"},inplace=True)\ndf.drop(0,inplace=True) \ndf=df[['year','cpi','food_cpi']]\ndf.reset_index(drop=True,inplace=True)\n```\n:::\n\n\n* **inplace = True**                \ndf.drop(0,inplace=True) 와 df = df.drop(0) 같은 의미이다.\n\n* **reset_index(drop=True)**                \n인덱스 번호를 초기화하는 함수로 drop=True 해야 전 인덱스 번호가 사라진다.\n\n\n* 최저시급 열 추가\n\n::: {#3aa49689 .cell execution_count=4}\n``` {.python .cell-code}\nlist = [\"4,320\",\"4,580\",\"4,860\",\"5,210\",\"5,580\",\"6,030\",\"6,470\",\\\n        \"7,530\",\"8,350\",\"8,590\",\"8,720\",\"9,160\",\"9,620\"]\ndf['min_wage'] = np.array(list)\ndf = df[['year',\"min_wage\", 'cpi', 'food_cpi']]\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>min_wage</th>\n      <th>cpi</th>\n      <th>food_cpi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2011</td>\n      <td>4,320</td>\n      <td>89.85</td>\n      <td>83.653</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2012</td>\n      <td>4,580</td>\n      <td>91.815</td>\n      <td>85.614</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2013</td>\n      <td>4,860</td>\n      <td>93.01</td>\n      <td>86.326</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2014</td>\n      <td>5,210</td>\n      <td>94.196</td>\n      <td>86.776</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2015</td>\n      <td>5,580</td>\n      <td>94.861</td>\n      <td>88.82</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* 최저시급과 연도 컬럼 정수형으로 변경\n\n::: {#2eaf9fc4 .cell execution_count=5}\n``` {.python .cell-code}\ntype(df[\"min_wage\"][0])\ntype(df[\"year\"][0])\ndf[\"min_wage\"] = df[\"min_wage\"].str.replace(',',\"\").astype(int) \ndf[\"year\"] = df[\"year\"].astype(int) \ntype(df[\"min_wage\"][0])\ntype(df[\"year\"][0])\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nnumpy.int64\n```\n:::\n:::\n\n\n::: {#50aaf930 .cell execution_count=6}\n``` {.python .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>min_wage</th>\n      <th>cpi</th>\n      <th>food_cpi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2011</td>\n      <td>4320</td>\n      <td>89.85</td>\n      <td>83.653</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2012</td>\n      <td>4580</td>\n      <td>91.815</td>\n      <td>85.614</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2013</td>\n      <td>4860</td>\n      <td>93.01</td>\n      <td>86.326</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2014</td>\n      <td>5210</td>\n      <td>94.196</td>\n      <td>86.776</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2015</td>\n      <td>5580</td>\n      <td>94.861</td>\n      <td>88.82</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2016</td>\n      <td>6030</td>\n      <td>95.783</td>\n      <td>91.158</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2017</td>\n      <td>6470</td>\n      <td>97.645</td>\n      <td>94.199</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2018</td>\n      <td>7530</td>\n      <td>99.086</td>\n      <td>96.373</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2019</td>\n      <td>8350</td>\n      <td>99.466</td>\n      <td>97.161</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2020</td>\n      <td>8590</td>\n      <td>100</td>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2021</td>\n      <td>8720</td>\n      <td>102.5</td>\n      <td>104.69</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2022</td>\n      <td>9160</td>\n      <td>107.72</td>\n      <td>111.88</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>2023</td>\n      <td>9620</td>\n      <td>111.59</td>\n      <td>118.16</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* 소비자 물가 지수 기준을 2011년으로 변환\n\n::: {#7ef7e02e .cell execution_count=7}\n``` {.python .cell-code}\ncpi_coefficent=df['cpi'][0]/df['cpi'][9]\nfood_coefficent=df['food_cpi'][0]/df['food_cpi'][9]\ndf[\"cpi\"] = df[\"cpi\"]/cpi_coefficent\ndf[\"food_cpi\"] = df[\"food_cpi\"]/food_coefficent\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>min_wage</th>\n      <th>cpi</th>\n      <th>food_cpi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2011</td>\n      <td>4320</td>\n      <td>100.0</td>\n      <td>100.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2012</td>\n      <td>4580</td>\n      <td>102.186978</td>\n      <td>102.344208</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2013</td>\n      <td>4860</td>\n      <td>103.516973</td>\n      <td>103.195343</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2014</td>\n      <td>5210</td>\n      <td>104.83695</td>\n      <td>103.733279</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2015</td>\n      <td>5580</td>\n      <td>105.577073</td>\n      <td>106.176706</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 인플레이션\n**우리가 흔히 알고 있는 인플레이션율이란 물가 상승률로, CPI의 변화율로 측정할 수 있다. 일반적인 국가에선 물가는 지속적으로 상승하기 때문에 인플레이션은 대부분 양수로 나타난다.**\n\n![](data/inflation.PNG)\n\n* 인플레이션 계산 \n\n::: {#6232fe9d .cell execution_count=8}\n``` {.python .cell-code}\ndf[\"inflation\"] = 0.0\n\nfor i in range(1, len(df)):\n    df.loc[i, \"inflation\"] = ((df.loc[i, \"cpi\"] - df.loc[i-1, \"cpi\"])\\\n    /df.loc[i-1, \"cpi\"]) * 100\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>min_wage</th>\n      <th>cpi</th>\n      <th>food_cpi</th>\n      <th>inflation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2011</td>\n      <td>4320</td>\n      <td>100.0</td>\n      <td>100.0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2012</td>\n      <td>4580</td>\n      <td>102.186978</td>\n      <td>102.344208</td>\n      <td>2.186978</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2013</td>\n      <td>4860</td>\n      <td>103.516973</td>\n      <td>103.195343</td>\n      <td>1.301530</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2014</td>\n      <td>5210</td>\n      <td>104.83695</td>\n      <td>103.733279</td>\n      <td>1.275132</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2015</td>\n      <td>5580</td>\n      <td>105.577073</td>\n      <td>106.176706</td>\n      <td>0.705975</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* 식품 인플레이션 계산\n\n::: {#b615e346 .cell messeage='false' execution_count=9}\n``` {.python .cell-code}\ndf['food_inflation'] = 0\nfor i in range(1, len(df)):\\\n    df.loc[i, \"food_inflation\"] = ((df.loc[i, \"food_cpi\"] - df.loc[i-1, \"food_cpi\"])\\\n   /df.loc[i-1, \"food_cpi\"]) * 100\ndf['food_inflation'] = df['food_inflation'].fillna(0)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>min_wage</th>\n      <th>cpi</th>\n      <th>food_cpi</th>\n      <th>inflation</th>\n      <th>food_inflation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2011</td>\n      <td>4320</td>\n      <td>100.0</td>\n      <td>100.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2012</td>\n      <td>4580</td>\n      <td>102.186978</td>\n      <td>102.344208</td>\n      <td>2.186978</td>\n      <td>2.344208</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2013</td>\n      <td>4860</td>\n      <td>103.516973</td>\n      <td>103.195343</td>\n      <td>1.301530</td>\n      <td>0.831640</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2014</td>\n      <td>5210</td>\n      <td>104.83695</td>\n      <td>103.733279</td>\n      <td>1.275132</td>\n      <td>0.521280</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2015</td>\n      <td>5580</td>\n      <td>105.577073</td>\n      <td>106.176706</td>\n      <td>0.705975</td>\n      <td>2.355490</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2016</td>\n      <td>6030</td>\n      <td>106.603228</td>\n      <td>108.971585</td>\n      <td>0.971948</td>\n      <td>2.632290</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2017</td>\n      <td>6470</td>\n      <td>108.67557</td>\n      <td>112.60684</td>\n      <td>1.943978</td>\n      <td>3.335966</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2018</td>\n      <td>7530</td>\n      <td>110.279354</td>\n      <td>115.205671</td>\n      <td>1.475754</td>\n      <td>2.307880</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2019</td>\n      <td>8350</td>\n      <td>110.702282</td>\n      <td>116.147658</td>\n      <td>0.383505</td>\n      <td>0.817656</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2020</td>\n      <td>8590</td>\n      <td>111.296605</td>\n      <td>119.541439</td>\n      <td>0.536867</td>\n      <td>2.921954</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2021</td>\n      <td>8720</td>\n      <td>114.079021</td>\n      <td>125.147933</td>\n      <td>2.500000</td>\n      <td>4.690000</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2022</td>\n      <td>9160</td>\n      <td>119.888703</td>\n      <td>133.742962</td>\n      <td>5.092683</td>\n      <td>6.867896</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>2023</td>\n      <td>9620</td>\n      <td>124.195882</td>\n      <td>141.250164</td>\n      <td>3.592648</td>\n      <td>5.613157</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 인플레이션, 식품 인플레이션 비교 그래프\n\n::: {#da444ebc .cell execution_count=10}\n``` {.python .cell-code}\nplt.clf()\nplt.figure(figsize=(5.5,4))\nsns.lineplot(data=df, x='year', y='food_inflation',color='red' ,label='식품 인플레이션', marker='o')\nsns.lineplot(data=df, x='year', y='inflation',color='dodgerblue',label='총 인플레이션', marker='o')\n# 레이블과 제목 설정\nplt.xlabel('Year',fontsize=16)\nplt.ylabel('Percentage(%)',fontsize=16)\nplt.title('총 인플레이션과 식품 인플레이션의 비교')\nplt.legend()\n# 그래프 표시\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 1200x900 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-2.png){width=737 height=604}\n:::\n:::\n\n\n**그래프를 통해 식품 인플레이션의 변화율이 크다는 것을 알 수 있다. 식품 부문 인플레이션이 더 크기 때문에 실제 소비자가 체감하는 물가상승률이 더 크다는 점 또한 알 수 있다.**\n\n***\n\n**똑같은 최저 시급을 받더라도 인플레이션이 있다면 내가 실제로 받는 시급은 줄어들게 된다. 우리가 실질적으로 받는 최저 시급을 구하기 위해서 인플레이션 조정계수를 구한후 최저 시급에 곱했다. 인플레이션 조정 계수를 곱함으로써 물가의 영향을 제거할 수 있다.**\n\n* 최저시급, 실질 최저시급 상승률 \n\n::: {#9515672a .cell messeage='false' execution_count=11}\n``` {.python .cell-code}\ninfla_coefficient = np.array(100/df['cpi'])\n\ndf['real_wage'] = df['min_wage'] * infla_coefficient\ndf['real_wage'] = df['real_wage'].astype(int)\n\ndf[\"real_wage_roc\"] = 0\nfor i in range(1, len(df)):\n    df.loc[i, \"real_wage_roc\"] = ((df.loc[i, \"real_wage\"] - df.loc[i-1, \"real_wage\"])\\\n   /df.loc[i-1, \"real_wage\"]) * 100\n\ndf[\"min_wage_roc\"] = 0\nfor i in range(1, len(df)):\n    df.loc[i, \"min_wage_roc\"] = ((df.loc[i, \"min_wage\"] - df.loc[i-1, \"min_wage\"])\\\n   /df.loc[i-1, \"min_wage\"]) * 100\n\ndf = df[['year', 'min_wage','real_wage',\"min_wage_roc\",\"real_wage_roc\",\\\n         'cpi', 'food_cpi', 'inflation', 'food_inflation']]\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>min_wage</th>\n      <th>real_wage</th>\n      <th>min_wage_roc</th>\n      <th>real_wage_roc</th>\n      <th>cpi</th>\n      <th>food_cpi</th>\n      <th>inflation</th>\n      <th>food_inflation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2011</td>\n      <td>4320</td>\n      <td>4320</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>100.0</td>\n      <td>100.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2012</td>\n      <td>4580</td>\n      <td>4481</td>\n      <td>6.018519</td>\n      <td>3.726852</td>\n      <td>102.186978</td>\n      <td>102.344208</td>\n      <td>2.186978</td>\n      <td>2.344208</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2013</td>\n      <td>4860</td>\n      <td>4694</td>\n      <td>6.113537</td>\n      <td>4.753403</td>\n      <td>103.516973</td>\n      <td>103.195343</td>\n      <td>1.301530</td>\n      <td>0.831640</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2014</td>\n      <td>5210</td>\n      <td>4969</td>\n      <td>7.201646</td>\n      <td>5.858543</td>\n      <td>104.83695</td>\n      <td>103.733279</td>\n      <td>1.275132</td>\n      <td>0.521280</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2015</td>\n      <td>5580</td>\n      <td>5285</td>\n      <td>7.101727</td>\n      <td>6.359428</td>\n      <td>105.577073</td>\n      <td>106.176706</td>\n      <td>0.705975</td>\n      <td>2.355490</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 최저시급/ 실질 최저시급 상승률 비교 \n\n::: {#05eae1a6 .cell execution_count=12}\n``` {.python .cell-code}\nplt.figure(figsize=(5.5,4))\nsns.lineplot(data=df,x='year',y='min_wage_roc',color='red',label=' 최저시급 변화율',marker='o')\nsns.lineplot(data=df,x='year',y='real_wage_roc',color='dodgerblue',label='실질 최저시급 변화율',marker='o')\n# 레이블과 제목 설정\nplt.xlabel('Year',fontsize=16)\nplt.ylabel('Percentage(%)',fontsize=16)\nplt.ylim(-2, 17)\nplt.grid()\nplt.title('최저시급과 실질 최저시급의 변화율 비교')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-1.png){width=768 height=604}\n:::\n:::\n\n\n**\"실질 최저시급\"의 상승률이 모든 연도에서 최저시급의 상승률보다 낮다.**\n**또한 2021 ~ 2022년도 같은 경우 최저 시급이 상승했음에도 실질 최저 시급이 하락했다.**\n\n\n\n\n***\n### 한국의 최저임금이 OECD의 다른 나라와 비교하면 어떨까? <br/>\nOECD 최저시급 데이터가 있지만, 각 나라의 물가를 반영하지 않기 때문에 환율과 구매력 평가(이하 PPP) 데이터를 사용하여 비교했다.\n\n한국과 다른 나라들의 실질 최저임금을 비교하기 위해 환율과 PPP를 변환 계수로 사용하여 각 나라의 최저시급(달러)에 곱함으로써, 서로 비교할 수 있는 실질 임금 지표를 만들었다.\n<br/><br/>\n\n### PPP란? <br/>\nPPP는 구매력 평가라는 뜻으로, 실질 구매력을 나타내는 지표이다.<br/><br/>\n\n예를 들어, PPP가 800이라면 각 국가의 비교시, 미국에서 1달러를 가지고 살 수 있는 상품을 한국에서 살 때는 실질적으로 800원이 든다는 뜻이다.<br/><br/>\n\n\n\n## OECD 국가 별 최저시급\n* 칼럼 확인\n\n::: {#60883aa5 .cell execution_count=13}\n``` {.python .cell-code}\nbefore_frame = pd.read_excel(\"data/최저임금데이터_df.xlsx\")\npath1, path2 = [\"data/PPP원데이터_df.xlsx\",\"data/환율원데이터_df.xlsx\"]\ndf2 = pd.read_excel(path1) \ndf2\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Reference area</th>\n      <th>Combined unit of measure</th>\n      <th>Unnamed: 2</th>\n      <th>Unnamed: 3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Australia</td>\n      <td>National currency per US dollar, Australian do...</td>\n      <td>NaN</td>\n      <td>1.391128</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Austria</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.708583</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Belgium</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.701943</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Canada</td>\n      <td>National currency per US dollar, Canadian dollar</td>\n      <td>NaN</td>\n      <td>1.169928</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Chile</td>\n      <td>National currency per US dollar, Chilean peso</td>\n      <td>NaN</td>\n      <td>431.415905</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Colombia</td>\n      <td>National currency per US dollar, Colombian peso</td>\n      <td>NaN</td>\n      <td>1401.241791</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Costa Rica</td>\n      <td>National currency per US dollar, Costa Rican c...</td>\n      <td>NaN</td>\n      <td>323.002654</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Czechia</td>\n      <td>National currency per US dollar, Czech koruna</td>\n      <td>NaN</td>\n      <td>12.550550</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Denmark</td>\n      <td>National currency per US dollar, Danish krone</td>\n      <td>NaN</td>\n      <td>6.106244</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Estonia</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.562992</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Finland</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.764142</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>France</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.672356</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Germany</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.703527</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Greece</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.516235</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Hungary</td>\n      <td>National currency per US dollar, Forint</td>\n      <td>NaN</td>\n      <td>170.212279</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Iceland</td>\n      <td>National currency per US dollar, Iceland krona</td>\n      <td>NaN</td>\n      <td>140.155004</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Ireland</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.751366</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Israel</td>\n      <td>National currency per US dollar, New Israeli s...</td>\n      <td>NaN</td>\n      <td>3.586914</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Italy</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.604018</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Japan</td>\n      <td>National currency per US dollar, Yen</td>\n      <td>NaN</td>\n      <td>94.677395</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Korea</td>\n      <td>National currency per US dollar, Won</td>\n      <td>NaN</td>\n      <td>800.348017</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Latvia</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.504500</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Lithuania</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.483176</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Luxembourg</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.827530</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Mexico</td>\n      <td>National currency per US dollar, Mexican peso</td>\n      <td>NaN</td>\n      <td>9.659930</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Netherlands</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.739454</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>New Zealand</td>\n      <td>National currency per US dollar, New Zealand d...</td>\n      <td>NaN</td>\n      <td>1.460444</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Norway</td>\n      <td>National currency per US dollar, Norwegian krone</td>\n      <td>NaN</td>\n      <td>8.894996</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>Poland</td>\n      <td>National currency per US dollar, Zloty</td>\n      <td>NaN</td>\n      <td>1.879248</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>Portugal</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.517344</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Slovak Republic</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.506852</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Slovenia</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.541355</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>Spain</td>\n      <td>National currency per US dollar, Euro</td>\n      <td>NaN</td>\n      <td>0.572592</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Sweden</td>\n      <td>National currency per US dollar, Swedish krona</td>\n      <td>NaN</td>\n      <td>8.509281</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Switzerland</td>\n      <td>National currency per US dollar, Swiss franc</td>\n      <td>NaN</td>\n      <td>0.966273</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>Türkiye</td>\n      <td>National currency per US dollar, Turkish lira</td>\n      <td>NaN</td>\n      <td>6.974967</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>United Kingdom</td>\n      <td>National currency per US dollar, Pound sterling</td>\n      <td>NaN</td>\n      <td>0.667418</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>United States</td>\n      <td>National currency per US dollar, US dollar</td>\n      <td>NaN</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* 추가 데이터 병합 및 열 지정 (1)\n\n::: {#7cf9acc7 .cell execution_count=14}\n``` {.python .cell-code}\ndf2.rename(columns = {\"Reference area\":\"country\",\"Unnamed: 3\":\"dollar_ppp\"},inplace=True)\ndf2[\"dollar_ppp\"] = df2[\"dollar_ppp\"].astype(float)\n\nnames = {\n\"United Kingdom\": 'UnitedKingdom', 'Türkiye': 'Turkiye', \"New Zealand\": 'NewZealand'\n}\ndf2['country'] = df2['country'].replace(names)\n\ntemp_frame2 = df2[[\"country\",\"dollar_ppp\"]]     \nbefore_frame = pd.merge(before_frame,temp_frame2,how=\"left\",on=\"country\")\nbefore_frame\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>min_wage</th>\n      <th>min_wage_rank</th>\n      <th>dollar_ppp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mexico</td>\n      <td>1.1</td>\n      <td>28</td>\n      <td>9.659930</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Chile</td>\n      <td>2.1</td>\n      <td>27</td>\n      <td>431.415905</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Turkiye</td>\n      <td>2.6</td>\n      <td>26</td>\n      <td>6.974967</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Latvia</td>\n      <td>3.0</td>\n      <td>25</td>\n      <td>0.504500</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Hungary</td>\n      <td>3.1</td>\n      <td>24</td>\n      <td>170.212279</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Poland</td>\n      <td>3.9</td>\n      <td>22</td>\n      <td>1.879248</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Slovak Republic</td>\n      <td>3.9</td>\n      <td>22</td>\n      <td>0.506852</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Estonia</td>\n      <td>4.1</td>\n      <td>19</td>\n      <td>0.562992</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Greece</td>\n      <td>4.1</td>\n      <td>19</td>\n      <td>0.516235</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Czechia</td>\n      <td>4.1</td>\n      <td>19</td>\n      <td>12.550550</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Lithuania</td>\n      <td>4.7</td>\n      <td>18</td>\n      <td>0.483176</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Portugal</td>\n      <td>5.0</td>\n      <td>17</td>\n      <td>0.517344</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Slovenia</td>\n      <td>6.5</td>\n      <td>16</td>\n      <td>0.541355</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Korea</td>\n      <td>7.1</td>\n      <td>14</td>\n      <td>800.348017</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Japan</td>\n      <td>7.1</td>\n      <td>14</td>\n      <td>94.677395</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>United States</td>\n      <td>7.3</td>\n      <td>13</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Spain</td>\n      <td>8.2</td>\n      <td>12</td>\n      <td>0.572592</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Israel</td>\n      <td>8.6</td>\n      <td>11</td>\n      <td>3.586914</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Netherlands</td>\n      <td>10.5</td>\n      <td>10</td>\n      <td>0.739454</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Belgium</td>\n      <td>10.9</td>\n      <td>9</td>\n      <td>0.701943</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Ireland</td>\n      <td>11.1</td>\n      <td>7</td>\n      <td>0.751366</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Germany</td>\n      <td>11.1</td>\n      <td>7</td>\n      <td>0.703527</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Canada</td>\n      <td>11.2</td>\n      <td>6</td>\n      <td>1.169928</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>France</td>\n      <td>11.4</td>\n      <td>5</td>\n      <td>0.672356</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>UnitedKingdom</td>\n      <td>11.5</td>\n      <td>4</td>\n      <td>0.667418</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>NewZealand</td>\n      <td>13.3</td>\n      <td>3</td>\n      <td>1.460444</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>Luxembourg</td>\n      <td>13.9</td>\n      <td>2</td>\n      <td>0.827530</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Australia</td>\n      <td>14.5</td>\n      <td>1</td>\n      <td>1.391128</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* 추가 데이터 병합 및 열 지정 (2)\n\n::: {#3338aeaa .cell execution_count=15}\n``` {.python .cell-code}\ndf3 = pd.read_excel(path2) \ndf3.rename(columns = {\"Reference area\":\"country\",\"Unnamed: 4\":\"exchange_rate\"},inplace=True)\ndf3 = df3[df3['Transaction']==\"Exchange rates, average\"].reset_index(drop=True)\ndf3[\"exchange_rate\"] = df3[\"exchange_rate\"].astype(float)\n\ndf3['country'] = df3['country'].replace(names)\n\ntemp_frame3 = df3[[\"country\",\"exchange_rate\"]]\noecd = pd.merge(before_frame,temp_frame3,how=\"left\",on=\"country\")\noecd.loc[oecd['country'] == 'Turkiye', 'exchange_rate'] = 33.1\noecd.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>min_wage</th>\n      <th>min_wage_rank</th>\n      <th>dollar_ppp</th>\n      <th>exchange_rate</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mexico</td>\n      <td>1.1</td>\n      <td>28</td>\n      <td>9.659930</td>\n      <td>17.758717</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Chile</td>\n      <td>2.1</td>\n      <td>27</td>\n      <td>431.415905</td>\n      <td>840.066527</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Turkiye</td>\n      <td>2.6</td>\n      <td>26</td>\n      <td>6.974967</td>\n      <td>33.100000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Latvia</td>\n      <td>3.0</td>\n      <td>25</td>\n      <td>0.504500</td>\n      <td>0.924840</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Hungary</td>\n      <td>3.1</td>\n      <td>24</td>\n      <td>170.212279</td>\n      <td>353.088333</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n* **각 나라의 물가 수준과 환율을 이용하여 달러로 변환한 실질 최저 시급 도출**<br/><br/>\n\nPPP는 환율과는 달리 물가 수준을 반영하기 때문에, 동일한 금액으로 각국에서 얼마나 많은 상품과 서비스를 구매할 수 있는지를 비교할 수 있다.<br/>\n\n예를 들어, 최저시급을 PPP로 나눴을 땐 실질적으로 상품 몇 개를 살 수 있을지가 나오는데, <br/>\n  **-> 최저시급(dollar)에 환율을 곱한 후 PPP로 나눈다면 각국의 실질 구매력을 고려한 임금 비교가 가능하다.  **<br/><br/>\n\n* 환율/ PPP 열 추가\n\n::: {#806ae085 .cell execution_count=16}\n``` {.python .cell-code}\noecd[\"coefficient\"] = oecd[\"exchange_rate\"]/oecd[\"dollar_ppp\"]\noecd[\"real_wage\"] = oecd[\"min_wage\"]*oecd[\"coefficient\"]\n\noecd.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>min_wage</th>\n      <th>min_wage_rank</th>\n      <th>dollar_ppp</th>\n      <th>exchange_rate</th>\n      <th>coefficient</th>\n      <th>real_wage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mexico</td>\n      <td>1.1</td>\n      <td>28</td>\n      <td>9.659930</td>\n      <td>17.758717</td>\n      <td>1.838390</td>\n      <td>2.022229</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Chile</td>\n      <td>2.1</td>\n      <td>27</td>\n      <td>431.415905</td>\n      <td>840.066527</td>\n      <td>1.947231</td>\n      <td>4.089186</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Turkiye</td>\n      <td>2.6</td>\n      <td>26</td>\n      <td>6.974967</td>\n      <td>33.100000</td>\n      <td>4.745542</td>\n      <td>12.338410</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Latvia</td>\n      <td>3.0</td>\n      <td>25</td>\n      <td>0.504500</td>\n      <td>0.924840</td>\n      <td>1.833181</td>\n      <td>5.499544</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Hungary</td>\n      <td>3.1</td>\n      <td>24</td>\n      <td>170.212279</td>\n      <td>353.088333</td>\n      <td>2.074400</td>\n      <td>6.430640</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br/><br/>\n* OECD 국가별 최저임금 비교\n\n::: {#66ea3ea9 .cell messeage='false' execution_count=17}\n``` {.python .cell-code}\noecd = oecd.sort_values(\"real_wage\",ascending=True).reset_index(drop=True)\nplt.clf()\nplt.figure(figsize=(8,4))\nbar_colors = np.where(oecd[\"country\"]==\"Korea\",\"red\",\"dodgerblue\")\nsns.barplot(data=oecd.sort_values(\"real_wage\",ascending=True), \\\nx='country', y='real_wage', palette=bar_colors)\n\nplt.xticks(rotation=45, fontsize=6)  # 글씨 크기와 회전 각도 조정\nplt.yticks(fontsize=12)\nplt.xlabel('Country',fontsize=14)  # 축 제목 글씨 크기 조정\nplt.ylabel('Real Wage',fontsize=14)  # 축 제목 글씨 크기 조정\nplt.title('OECD 국가별 실질 최저임금', fontsize=20)  # 제목 글씨 크기 조정\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 1200x900 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-18-output-2.png){width=1044 height=660}\n:::\n:::\n\n\n* **상대적인 비교를 위해 OECD 실질 임금의 평균을 구하여 그래프에 추가하는 작업을 진행하였다.**\n<br/><br/>\n\n\n### OECD 평균 임금을 추가한 그래프\n\n::: {#d4c3b93b .cell messeage='false' execution_count=18}\n``` {.python .cell-code}\nmean1 = oecd[\"real_wage\"].mean()\n#country 에 평균 임금을 추가.\nframe = pd.DataFrame({\"country\":'Mean',\"real_wage\":mean1},index=[0])\noecd1 = pd.concat([oecd,frame])\noecd1 = oecd1.sort_values(\"real_wage\",ascending=True).reset_index(drop=True)\n```\n:::\n\n\n* \n\n::: {#26def6c2 .cell messeage='false' execution_count=19}\n``` {.python .cell-code}\n#Mean,Korea 색 다르게 하기\nbar_colors = np.where(oecd1[\"country\"]==\"Korea\",\"red\",np.where(oecd1[\"country\"]==\"Mean\",\"seagreen\",\"dodgerblue\"))\n\nsns.barplot(data=oecd1.sort_values(\"real_wage\",ascending=True),\\\nx='country', y='real_wage', palette=bar_colors)\n\nplt.xlabel('Country',fontsize=14)  # 축 제목 글씨 크기 조정\nplt.ylabel('Real Wage',fontsize=14)  # 축 제목 글씨 크기 조정\nplt.title('OECD 국가별 실질 최저임금', fontsize=20)  # 제목 글씨 크기 조정\n```\n:::\n\n\n*\n\n::: {#d2afcfc3 .cell execution_count=20}\n``` {.python .cell-code}\noecd1[\"country\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n0              Mexico\n1               Chile\n2              Latvia\n3             Hungary\n4             Estonia\n5     Slovak Republic\n6             Czechia\n7       United States\n8              Greece\n9              Poland\n10             Israel\n11           Portugal\n12          Lithuania\n13               Mean\n14              Japan\n15           Slovenia\n16              Korea\n17            Turkiye\n18             Canada\n19        Netherlands\n20              Spain\n21            Ireland\n22      UnitedKingdom\n23            Belgium\n24            Germany\n25         NewZealand\n26         Luxembourg\n27             France\n28          Australia\nName: country, dtype: object\n```\n:::\n:::\n\n\n*\n\n::: {#7d983d1e .cell messeage='false' execution_count=21}\n``` {.python .cell-code}\nshow_country_label = [0,3,7,9,11,13,14,16,18,20,22,24,27]\n\nshow_country = ['Mexico', 'Hungary', 'United States', 'Poland', 'Portugal', 'Mean','Japan', 'Korea', 'Canada', 'Spain',\\\n'United Kingdom', 'Germany', 'France']\n\nplt.xticks(rotation=45, fontsize=10, ticks = show_country_label,labels =show_country )  # 글씨 크기와 회전 각도 조정\nplt.yticks(fontsize=12)\n\nplt.show()\n```\n:::\n\n\n<br/><br/>\n\n## OECD 주요 국가의 평균 실질 임금 그래프\n\n::: {#edef4a48 .cell messeage='false' execution_count=22}\n``` {.python .cell-code}\nmean1 = oecd[\"real_wage\"].mean()\nframe = pd.DataFrame({\"country\":'Mean',\"real_wage\":mean1},index=[0])\noecd1 = pd.concat([oecd,frame])\noecd1 = oecd1.sort_values(\"real_wage\",ascending=True).reset_index(drop=True)\nplt.figure(figsize=(5.5,4))\n\nbar_colors = np.where(oecd1[\"country\"]==\"Korea\",\"red\",np.where(oecd1[\"country\"]==\"Mean\",\"seagreen\",\"dodgerblue\"))\n\nsns.barplot(data=oecd1.sort_values(\"real_wage\",ascending=True),\\\nx='country', y='real_wage', palette=bar_colors)\n\nplt.xlabel('Country',fontsize=14)  # 축 제목 글씨 크기 조정\nplt.ylabel('Real Wage',fontsize=14)  # 축 제목 글씨 크기 조정\nplt.title('OECD 주요국가별 실질 최저임금', fontsize=20)  # 제목 글씨 크기 조정\nshow_country_label = [0,3,7,9,11,13,14,16,18,20,22,24,27]\n\nshow_country = ['Mexico', 'Hungary', 'United States', 'Poland', 'Portugal', 'Mean','Japan', 'Korea', 'Canada', 'Spain',\\\n'United Kingdom', 'Germany', 'France']\n\nplt.xticks(rotation=45, fontsize=10, ticks = show_country_label,labels =show_country )  # 글씨 크기와 회전 각도 조정\nplt.yticks(fontsize=12)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-23-output-1.png){width=749 height=712}\n:::\n:::\n\n\n* **우리나라의 실질 최저 임금이 OECD 평균보다 높다는 것으로, 한국의 최저 임금이 타 국가들과 비교해서 높은 편인 것을 알 수 있다. **\n<br/><br/>\n\n***     \n# **결론**\n<span style=\"font-size:125%\">\n<span style=\"background-color:#fff5b1\">\n**1)인플레이션의 영향으로 최저시급 상승률에 비해 실질 최저시급 상승률이 낮다.** </span></span>\n\n**-> 최저 임금을 인상하는 만큼 그대로 소비자에게 전달되지 않는다.**\n\n\n<span style=\"font-size:125%\">  \n<span style=\"background-color:#fff5b1\">\n**2) 실질 물가 상승은 일반 소비자에게 더 크게 다가온다.**    </span></span>\n\n**-> 물가 상승시, 음식과 같은 필수재들의 물가는 소비자들에게 더 크게 다가올 수 있다.**\n<br/><br/>\n\n            \n<span style=\"font-size:125%\">  <span style=\"background-color:#fff5b1\">\n**3) 우리나라의 최저 임금은 OECD 내에서도 평균 이상이기 때문에, 최저임금의 대폭 인상은 바람직하지 않다.**  </span>\n</span>\n              \n\n\n<span style=\"font-size:110%\">  \n**2018년, 2019년과 같은 최저 시급의 대폭 인상은 물가 상승과 고용시장에의 부정적 영향 등의 부작용을 동반한다.**<br/>\n**최저임금 상승의 목적인 근로자의 소득 수준 상승과 그에 따른 소비 여력의 증가로 인한 경제 활성화는 노동, 복지 등의 다른 관점에서 접근하는 것이 유리할 수 있다.**\n</span>\n\n(2% 수준의 적정한 인플레이션과, 그에 따른 적정한 최저시급의 인상은 당연하다.)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}